% \iffalse meta-comment
% vim: textwidth=75
%<*internal>
\iffalse
%</internal>
%<*internal>
\fi
\def\nameofplainTeX{plain}
\ifx\fmtname\nameofplainTeX\else
  \expandafter\begingroup
\fi
%</internal>
%<*install>
\input docstrip.tex
\keepsilent
\askforoverwritefalse
\preamble
-------:| -----------------------------------------------------------------
  gurps:| A LaTeX package for GURPS typesetting
 Author:| Nathanael Farley
 E-mail:| nasfarley88@gmail.com
License:| Released under the LaTeX Project Public License v1.3c or later
    See:| http://www.latex-project.org/lppl.txt

\endpreamble
\postamble

Copyright (C) 2017-2018 by Nathanael Farley <nasfarley88@gmail.com>

This work may be distributed and/or modified under the
conditions of the LaTeX Project Public License (LPPL), either
version 1.3c of this license or (at your option) any later
version.  The latest version of this license is in the file:

http://www.latex-project.org/lppl.txt

This work is "maintained" (as per LPPL maintenance status) by
Nathanael Farley.

This work consists of the file gurps.dtx and a Makefile.
Running "make" generates the derived files README, gurps.pdf and gurps.sty.
Running "make inst" installs the files in the user's TeX tree.
Running "make install" installs the files in the local TeX tree.

\endpostamble

\usedir{tex/latex/gurps}
\generate{
  \file{\jobname.sty}{\from{\jobname.dtx}{package}}
}
%</install>
%<install>\endbatchfile
%<*internal>
\usedir{source/latex/gurps}
\generate{
  \file{\jobname.ins}{\from{\jobname.dtx}{install}}
}
\nopreamble\nopostamble
\usedir{doc/latex/gurps}
\ifx\fmtname\nameofplainTeX
  \expandafter\endbatchfile
\else
  \expandafter\endgroup
\fi
%</internal>
% \fi
%
% \iffalse
%<*driver>
\ProvidesFile{gurps.dtx}
%</driver>
%<package>\NeedsTeXFormat{LaTeX2e}[1999/12/01]
%<package>\ProvidesPackage{gurps}
%<*package>
    [1970/01/01 v0.3 A LaTeX package for GURPS typesetting]
%</package>
%<*driver>
\documentclass{ltxdoc}
\usepackage{hypdoc}
\usepackage[a4paper,margin=25mm,left=50mm,nohead]{geometry}
\usepackage{tcolorbox}
\usepackage{tabularx}
\usepackage{graphicx}
\usepackage{\jobname}

\usepackage[condensed,sfdefault]{universalis}
\usepackage{inconsolata}
\setmonofont{Inconsolatazi4}[
  Scale=0.93
] % or whatever font you prefer

\NewDocumentEnvironment{centerquote}{}{%
  \begin{center}\begin{minipage}{0.8\linewidth}\centering%
    }{%
    \end{minipage}\end{center}%
}

\EnableCrossrefs
\CodelineIndex
\RecordChanges
\begin{document}
  \DocInput{\jobname.dtx}
\end{document}
%</driver>
% \fi
%
% \GetFileInfo{\jobname.dtx}
% \DoNotIndex{\newcommand,\newenvironment,\NewDocumentEnvironment,\NewDocumentCommand}
%
% \title{\textsf{gurps} --- A LaTeX package for GURPS typesetting\thanks{This file
% describes version \fileversion, last revised \filedate.}
%}
%\author{Nathana\null el Farley\thanks{E-mail: nasfarley88@gmail.com}}
%\date{Released \filedate}
%
%\maketitle
%
%\changes{v0.1}{2018/02/13}{First public release}
%\changes{v0.1.1}{2018/02/14}{Minor changes to CTAN upload}
%\changes{v0.2}{2018/03/04}{Better character environment; \cs{gurpsbook} command added.}
%\changes{v0.3}{1970/01/01}{Completely changed underlying character lua
%structure. Removed lens environment (to be put in at a later date). TODO}
%
% \begin{abstract}
%   \textit{\textbf{GURPS}} is an excellent RPG system. \LaTeX{} is an excellent
%   typesetting system. Together, they make excellent game aids. At least, they
%   can with this package!
% \end{abstract}
%
% \tableofcontents
% 
% \section{Motivation}
%
% I often like to make \gurps game aids for my own games. Over time, I started
% to collect various macros that made it easier. Eventually, I had enough game
% aids that I decided to write the macros up in a package, then I realised I
% could release on CTAN and share the \gurps goodness!
%
%
%\section{Quickstart}
% A brief overview of the commands in this package can be found in \autoref{tab:basic-commands}.
% \begin{table}[t]
%   \centering
%   \caption{Basic commands in \texttt{gurps} package.}
%   \label{tab:basic-commands}
%   \small
%   \begin{tabularx}{0.99\linewidth}{lX}\hline
%       \textbf{Macro} & \textbf{Example} \\\hline
%       \cs{dice}\marg{no.~of~dice}\oarg{modifier} & \dice{3}[2] \\\hline
%       \cs{gurpsbook}\marg{name of book}\oarg{page(s)} & \gurpsbook{Zombies}[1] \\\hline
%       \cs{gurps} & \gurps \\\hline
%       \cs{SJGamesOnlinePolicyDisclaimer} & \SJGamesOnlinePolicyDisclaimer\\\hline
%       \cs{SJGamesOnlinePolicyNotice} & \SJGamesOnlinePolicyNotice\\\hline
%       \scalebox{0.8}[1]{\cs{SJGamesOnlinePolicyGameAid}}\marg{author name} & \SJGamesOnlinePolicyGameAid{AUTHOR NAME}\\\hline
%       \texttt{character} environment, \cs{ST}, \cs{advantage}, etc. &  See \autoref{sec:character-creation}
%     \end{tabularx}
%   \end{table}
%
%
% \section{In-depth usage}
% The macros in this package can be divided into roughly three sections:
% \begin{enumerate}
% \item character creation
% \item common typographical features of \gurps
% \item macros for abiding by SJGames online policy
% \end{enumerate}
%
% \subsection{Character creation}
% \label{sec:character-creation}
%
% \DescribeEnv{character}
% Character (i.e.~NPCs) creation can be tricky and involve a \emph{lot} of
% boilerplate code. This package provides most of the boilerplate code so you
% only specify what is \emph{different} from assumed values (e.g.~If your
% character has a ST~13 but DX~10, IQ~10, HT~10, you only need to specify ST)
%
% It is not currently possible to (easily) change the look of the stats block
% for the |character| environment. This is planned for a future release.
%
% \begin{tcolorbox}[title={\emph{Warning!}}]
%   This feature is still in alpha. The external API (\cs{skill},
%   \cs{advantage}, etc.) should not change, but the internal \TeX\ and layout
%   is \emph{very} likely to change.
% \end{tcolorbox}
%
% On to an example\footnote{Any resemblance to Napolean Dynamite is completely
% \ldots{} intentional!}:
%
% \begin{verbatim}
% \begin{character}
%   \ST{9}
%   \HP{12}
%   \GCAddToLevel{HP}{4}
%   \advantage{Natural afro}[1]
%   \skill{Nunchuck}[DX/Easy]{16}
%   \quirk{Big teeth}
%   \meleeattack{
%     name=Punch,
%     level=18,
%     damage={5d cr},
%     reach={C,1},
%     notes={Believe it!}
%   }
% \end{character}
% \end{verbatim}
%
% creates \ldots{}
%
% \begin{character}
%   \name{Mr.~Awesome}
%   \ST{9}
%   \HP{12}
%   \GCAddToLevel{HP}{4}
%   \advantage{Natural afro}[1]
%   \advantage{\TeX-nical afro}[1]
%   \quirk{Big teeth}
%   \skill{Nunchuck}[DX/Easy]{16}
%   \meleeattack{
%     name={Punch},
%     level=18,
%     damage={5d cr},
%     reach={C,1},
%     notes={Believe it!}
%   }
% \end{character}
%
% (Also, \cs{GCGet}\oarg{character key}\marg{name}\oarg{macro name}, allows the
% user to get individual values in a fully expandable macro (\cs{GCResult}) or
% raise an error. E.g. the ST of the character is \GCGet{ST}\GCResult and a
% dodge of \GCGet{Dodge}\GCResult). Also, the name of the character is \GCGet{Name}\GCResult.
%
%
% \subsection{Typographical features}
% \label{sec:typographical-features}
%
% \DescribeMacro{\dice}
% Using the \cs{dice}\marg{no.\ of dice}\oarg{modifier} provides dice notation
% consistent with \gurps materials. E.g.
% \begin{center}
%   |\dice{3}| \(\rightarrow\) \dice{3}\\
%   |\dice{4}[-1]| \(\rightarrow\) \dice{4}[-1]\\
%   |\dice{2}[1]| \(\rightarrow\) \dice{2}[1]
% \end{center}
%
% \DescribeMacro{\gurpsbook}
% The command \cs{gurpsbook}\marg{book name}\oarg{page number(s)} formats \gurps
% books like \SJGames. E.g.
% 
% \begin{center}
%   |\gurpsbook{High Tech}| \(\rightarrow\) \gurpsbook{High Tech}\\
%   |\gurpsbook{Zombies}[3]| \(\rightarrow\) \gurpsbook{Zombies}[3]\\
%   |\gurpsbook{Warehouse~23}[1, 3--5]| \(\rightarrow\) \gurpsbook{Warehouse~23}[1, 3--5]\\
% \end{center}
%
%
% \subsection{Online policy macros}
% \label{sec:online-policy-macros}
%
% \DescribeMacro{\SJGamesOnlinePolicyDisclaimer}
% \DescribeMacro{\SJGamesOnlinePolicyNotice}
% \DescribeMacro{\SJGamesOnlinePolicyGameAid}
% The macros \cs{SJGamesOnlinePolicyDisclaimer}, \cs{SJGamesOnlinePolicyNotice}
% and \linebreak\cs{SJGamesOnlinePolicyGameAid}\marg{author name} provide common
% boilerplate statements taken directly from
% \href{http://www.sjgames.com/general/online_policy.html}{SJGames online policy}
% with small modifications to make them more suitable to game aids
% created with \textsc{Lua}\LaTeX.
% 
% \DescribeMacro{\gurps}
% The command \cs{gurps} is also included to provide bold and italicised \gurps
% as requested in the online policy
%
%
% \subsubsection{\cs{SJGamesOnlinePolicyDisclaimer} text}
% Using the code |\SJGamesOnlinePolicyDisclaimer| produces the text:
% 
% \begin{centerquote}
%   \SJGamesOnlinePolicyDisclaimer
% \end{centerquote}
% 
% \subsubsection{\cs{SJGamesOnlinePolicyNotice} text}
% Using the code |\SJGamesOnlinePolicyOnlineNotice| produces the text:
%
% \begin{centerquote}
%   \SJGamesOnlinePolicyNotice
% \end{centerquote}
%
% \subsubsection{\cs{SJGamesOnlinePolicyGameAid} text}
% Using the code |\SJGamesOnlinePolicyGameAid{NAME}| produces the text:
% 
% \begin{centerquote}
%   \SJGamesOnlinePolicyGameAid{NAME}
% \end{centerquote}
%
%
%
%
%\StopEventually{^^A
%  \PrintChanges
%  \PrintIndex
%}
%
% \section{Implementation}
% Loading required libraries and the lua logic for this class.
%    \begin{macrocode}
%<*package>
\RequirePackage{etoolbox}
\RequirePackage{xparse}
\RequirePackage{xspace}
\RequirePackage{luacode}
\RequirePackage{shellesc}
\RequirePackage{tikz}
\RequirePackage{calc}
\PassOptionsToPackage{inline}{enumitem}
\RequirePackage[inline]{enumitem}

\RequirePackage{hyperref}
\RequirePackage{xstring}
\RequirePackage{xkeyval}

\luadirect{require("gurps.lua")}
\luadirect{require("gurps_character.lua")}
%    \end{macrocode}
% \begin{macro}{\gurps}
% Steve Jackson Games asks that the name \textbf{\textit{GURPS}} is always in
% bold and italicised. This macro provides that.
%    \begin{macrocode}
\NewDocumentCommand{\gurps}{s}{%
    \IfBooleanTF#1
    % With star
    {\href{http://www.sjgames.com/gurps/}{\textbf{\textit{GURPS}}\xspace}}
    % Without star
    {\textbf{\textit{GURPS}}\xspace}%
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\dice}
% Notates dice in the \gurps way (e.g. drops the |6| from |d6|) and puts it in %
% an |\mbox|. First argument number of dice. Second argument is a modifier and
% optional. E.g.~|\dice{3}[1]|
% creates \mbox{3d+1}.
%    \begin{macrocode}
\NewDocumentCommand{\dice}{mO{0}}{%
  \luadirect{print_dice([[#1]], [[#2]])}%
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\gurps@porpp}
% Helper macro to print pp.\ or p.\ when listing page numbers
%    \begin{macrocode}
\NewDocumentCommand{\gurps@porpp}{m}{\IfInteger{#1}{p.}{pp.}}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\gurpsbook}
% Works like this: \gurpsbook{Horror}[45] or \gurpsbook{Banestorm}[3, 45--48]
%    \begin{macrocode}
\NewDocumentCommand{\gurpsbook}{mo}{%
  \textbf{\textit{\gurps #1}}\IfValueT{#2}{ \gurps@porpp{#2}~#2}%
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\SJGames}
% \SJGames printed with link (starred) or without (unstarred).
%    \begin{macrocode}
\NewDocumentCommand{\SJGames}{s}{%
    \IfBooleanTF#1%
    % With star
    {\href{http://www.sjgames.com/}{Steve~Jackson~Games}\xspace}%
    % Without star
    {Steve~Jackson~Games\xspace}%
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\SJGamesOnlinePolicyDisclaimer}
% Online policy disclaimer, basically straight from the \SJGames online policy.
%    \begin{macrocode}
\NewDocumentCommand{\SJGamesOnlinePolicyDisclaimer}{}{%
  The material presented here is my original creation, intended for use with the
  \gurps* system from \SJGames*. This material is not official and is
  not endorsed by \SJGames.
}
%    \end{macrocode}
% \end{macro}
% 
% \begin{macro}{\SJGamesOnlinePolicyNotice}
% The disclaimer \emph{almost} as it appears on the online policy. The words
% `the art' have been removed since by default no art (including logos) are
% included in \LaTeX{} documents.
%    \begin{macrocode}
\NewDocumentCommand{\SJGamesOnlinePolicyNotice}{}{%
  \gurps* is a registered trademark of \SJGames*, and is copyrighted by
  \SJGames. All rights are reserved by \SJGames. This material is used
  here in accordance with the SJ Games
  \href{http://www.sjgames.com/general/online_policy.html}{online policy}.
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\SJGamesOnlinePolicyGameAid}
% This text is required for all game aid's produced for \textbf{\textit{GURPS}} but without an
% official license. It takes one argument: author name.
%    \begin{macrocode}
\NewDocumentCommand{\SJGamesOnlinePolicyGameAid}{m}{%
  \gurps* is a trademark of \SJGames*, and its rules and art are
  copyrighted by \SJGames*. All rights are reserved by
  \SJGames. This game aid is the original creation of #1 and
  is released for free distribution, and not for resale, under the
  permissions granted in the
  \href{http://www.sjgames.com/general/online_policy.html}%
        {\SJGames Online Policy}.
}
%    \end{macrocode}
% \end{macro}
%
%
%\subsection{Accessing character stuffs}
%\label{sec:acc-char-stuff}
%
% Often when doing more advanced things with characters, it's useful to have a
% way to access the values and levels from lua using only \LaTeX. These macros
% are for that
%
% \begin{macro}{\GCGet}
%    \begin{macrocode}
\NewDocumentCommand{\GCGet}{mO{\GCResult}}{%
  \luadirect{tex_get_value_or_level(
    _GCHARACTERKEY,
    \luastring{\unexpanded{#1}},
    \luastring{\unexpanded{#2}}
    )
  }%
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\GCAddToLevel}
% Sometimes it's useful to add values to existing attributes (specifically for
% Pyramid \#3/72). Note: the attributes \emph{must} be defined before they are
% added to the level. It goes like \cs{GCAddToLevel}\marg{name of
% attr.}\marg{amount to add}
%    \begin{macrocode}
\NewDocumentCommand{\GCAddToLevel}{mm}{%
  \luadirect{tex_add_to_level(
    \luastring{\unexpanded{#1}}, % Thing to get
    #2                           % How much to add to it
    )
  }%
}
%    \end{macrocode}
% \end{macro}
%
%\subsection{Character environment}
%\label{sec:character-environment}
%
% This section lists the |character| environment and all the macros that go into
% it.
%
% \begin{tcolorbox}[title={Future plans!}]
%   At the moment, there's a real mix of commands with and without |@| that
%   should probably be switched to be internal/external so that the user can
%   configure them (e.g. \cs{GCPrintAttr}). In the future, this will
%   happen. For now \ldots{} feel free to edit them and see what happens! |:)|\\[1ex]
%
%   Also in the future, there will eventually be `theme' support such that the
%   user can configure different ways of printing the character (e.g. disable
%   points for a monster manual, use a |tcolorbox| for the statblock, etc.).
%   Can't say when yet, but pull requests are welcome!
% \end{tcolorbox}
%
% \begin{environment}{character, character*}
% This environment defines a `character' i.e.~anything with full stats. A
% |character*| will define a character but not print it.
%
% It takes \oarg{character key} which provides a means to access the character
% later in the file. It is set with \cs{SetCharacterKey} and reset with
% \cs{ResetCharacterKey}. In order to access the character later, just use
% \cs{SetCharacterKey}\marg{character key}, use the commands (e.g.
% \cs{gurps@char@advantages}) and then reset\footnote{Although resetting is not
% strictly necessary, global variables are a Bad Thing\texttrademark{} so we
% reset in order to emulate some kind of scope. Resetting just changes the
% character key to \_.}.
%    \begin{macrocode}
\NewDocumentEnvironment{character}{sO{_}}{%
  \SetCharacterKey{#2}%
  \luadirect{new_character(_GCHARACTERKEY)}%
}{%
  \gurps@char@checkandfixattrsandpoints%
  \IfBooleanTF{#1}{}{\GCPrintCharacter}%
  \ResetCharacterKey%
}
\ExplSyntaxOn
\cs_new:cpn {character*} {\character*}
\cs_new_eq:cN {endcharacter*} \endcharacter
\ExplSyntaxOff
%    \end{macrocode}
% \end{environment}
%
% \begin{macro}{\getcharacterfromgcx}
% Because generating a character on the fly with \cs{getcharacterfromfile} can
% take a \emph{long} time, this macro gives the option to use a pregenerated gcx
% file. To generate a gcx file, use the command:
%
% |$ gcs character.gcs -text -text_template=$(kpsewhich gurps-gcs-template.gcx)|
%    \begin{macrocode}
\NewDocumentCommand{\getcharacterfromgcx}{smm}{%
  \IfBooleanTF{#1}{%
    % Starred
    \begin{character*}[#3]%
      \input{#2.gcx}
    \end{character*}%
  }{%
    % Unstarred
    \begin{character}[#3]%
      \input{#2.gcx}
    \end{character}%
  }%
}
%    \end{macrocode}
% \end{macro}
% 
% \begin{macro}{\getcharacterfromfile}
%    \begin{macrocode}
\NewDocumentCommand{\getcharacterfromfile}{mm}{%
  % TODO set this up so it does not clutter the folder of the character sheets
  % by default
  \luadirect{tex_getcharacterfromfile(
    \luastring{\unexpanded{#1}},
    \luastring{\unexpanded{#2}}
    )}%
  \getcharacterfromgcx{#1}{#2}
}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\SetCharacterKey}
% Sets the key for the current character. This sets the lua string |_GCHARACTER|
% which acts as a key for the global Lua table |_GCHARACTERS|.
%    \begin{macrocode}
\NewDocumentCommand{\SetCharacterKey}{m}{%
  \luadirect{_GCHARACTERKEY = \luastring{\unexpanded{#1}}}%
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\ResetCharacterKey}
% Resets the character key to |_|.
%    \begin{macrocode}
\NewDocumentCommand{\ResetCharacterKey}{}{%
  \SetCharacterKey{_}%
}
%    \end{macrocode}
% \end{macro}
%
% 
% \begin{macro}{\GCInsertAttr}
% Macro for inserting an attribute to the character. Anything inserted with
% |:nolatex:| in the name is not added to the character. (This is to aid
% importing directly from a |*.gcs| file.)
%
% First, we define the |xkeval| keys for the function. These are set up to
% convert the values directly into the right Lua types.
%    \begin{macrocode}
\define@key{GCInsertAttr}{name}{%
  \def\GCInsertAttr@name{\unexpanded{[[#1]]}}} %TODO check this << has
                                %fixed it
\define@key{GCInsertAttr}{type}{%
  \def\GCInsertAttr@type{\luastring{\unexpanded{#1}}}}
\define@key{GCInsertAttr}{value}{%
  \def\GCInsertAttr@value{\luastring{\unexpanded{#1}}}}
\define@key{GCInsertAttr}{level}{%
  \def\GCInsertAttr@level{#1}}
\define@key{GCInsertAttr}{diceexpr}{%
  \def\GCInsertAttr@diceexpr{\luastring{#1}}}
\define@key{GCInsertAttr}{points}{%
  \def\GCInsertAttr@points{#1}}
\define@key{GCInsertAttr}{basedon}{%
  \def\GCInsertAttr@basedon{\luastring{\unexpanded{#1}}}}
\define@key{GCInsertAttr}{difficulty}{%
  \def\GCInsertAttr@difficulty{\luastring{\unexpanded{#1}}}}
%    \end{macrocode}
% Then we define \cs{GCInsertAttr}\marg{key-value pairs}. The macro
% first checks we are in a |character| environment (throwing an error if we are
% not), defines the keys, then does the Lua stuff.
%
% Side note: anything with |:nolatex:| in the name is discarded and not put into
% the character.
%    \begin{macrocode}
\NewDocumentCommand{\GCInsertAttr}{m}{
  % If not in character or character* environment, raise a PackageError
  \def\@myenvname{character}
  \ifx\@currenvir\@myenvname
    % pass
  \else
    \def\@myenvname{character*}
    \ifx\@currenvir\@myenvname
      % pass
    \else
      \PackageError{gurps}{Not in character environment! Currently in \@currenvir{} environment.}{}
    \fi
  \fi

  \setkeys{GCInsertAttr}{
    name=NotSet,
    type=NotSet,
    points=nil,
    level=nil,
    value=NotSet,
    basedon=DX,
    difficulty=NotSet,
    diceexpr=NotSet,
  }

  \setkeys{GCInsertAttr}{#1}

  % If the name has the tag :nolatex:, don't add it! Otherwise, add it.
  \luadirect{
    if not string.find(\luastring{\GCInsertAttr@name}, \luastring{:nolatex:}) then
      % If arg is blank (e.g. identity()), then this returns nil.
      function identity(x)
        return x
      end

      x = {
        name=\GCInsertAttr@name,
        type=\GCInsertAttr@type,
        points=\GCInsertAttr@points,
        level=identity(\GCInsertAttr@level),
        value=\GCInsertAttr@value,
        basedon=\GCInsertAttr@basedon,
        difficulty=\GCInsertAttr@difficulty,
        diceexpr=\GCInsertAttr@diceexpr
      }

      if_else_packageerror(
      function() return is_valid_type(x.type) end,
      "Type '" .. x.type .. "' is not a valid attribute type!"
      .. " Did you remember to set the type?"
      )

      if_else_packageerror(
      function() return is_valid_points(x.points) end,
      "Points value '" .. tostring(x.points) .. "' is not valid!"
      )

      if x.type == "skill" or x.type == "spell" then 
        if_else_packageerror(
          function() return is_valid_difficulty(x.difficulty) end,
          "Difficulty value '" .. x.difficulty .. "' is not valid!"
        )
        end
      insert_attr(_GCHARACTERKEY, x)
    end
  }%
}
%    \end{macrocode}
% \end{macro}
%
%
%\subsection{Printing the character}
%
% \begin{macro}{\GCIfListNotEmpty}
% Looks like \cs{GCIfListNotEmpty}\marg{list name}{tex.sprint if true}. An
% interface to a lua function which only prints the contents if the list
% specified is not empty.
%    \begin{macrocode}
\NewDocumentCommand{\GCIfListNotEmpty}{mm}{%
  \luadirect{tex_if_list_not_empty(\luastring{\unexpanded{#1}},
                                   \luastring{\unexpanded{#2}})}
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\GCPrintListSection}
%    \begin{macrocode}
\NewDocumentCommand{\GCPrintListSection}{mO{nil}m}{%
  \GCIfListNotEmpty{#3}{%
    \charactersection*{#1}%
    \GCPrintListOf[#2]{#3}%
  }%
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\GCPrintCharacter}
% This function prints the current character. It is of the form
% \cs{GCPrintCharacter}\oarg{character key}.
%    \begin{macrocode}
\NewDocumentCommand{\GCPrintCharacter}{o}{%
  \IfValueTF{#1}{\SetCharacterKey{#1}}{}%
  \GCPrintListSection{Basic Attributer}[basic_attributes_sorter]{basic_attributes}
  \GCPrintListSection{Secondary Characteristics}[secondary_characteristics_sorter]{secondary_characteristics}
  \GCPrintListSection{Other}{properties}%
  \GCPrintListSection{Advantages}{advantages}%
  \GCPrintListSection{Perks}{perks}%
  \GCPrintListSection{Disadvantages}{disadvantages}%
  \GCPrintListSection{Quirks}{quirks}%
  \GCPrintListSection{Skills}{skills}%
  \GCPrintListSection{Spells}{spells}%
  \GCIfListNotEmpty{attacks}{%
    \charactersection*{\strut Attacks}\ \linebreak%
    \GCPrintListOfAttacks%
  }%
  \IfValueTF{#1}{\ResetCharacterKey}{}%
}
%    \end{macrocode}
% \end{macro}
%
%\subsubsection{Metadata}
%\label{sec:char-metadata}
%
% This section contains commands for metadata for the character e.g. data that
% does not change calculations but that is useful like \cs{name}\marg{name}.
%
% \begin{macro}{\name}
%    \begin{macrocode}
\NewDocumentCommand{\name}{m}{%
  \GCInsertAttr{%
    name=Name,
    value=#1,
    type=metadata
  }%
}
%    \end{macrocode}
% \end{macro}
% 
%\subsubsection{Basic attributes}
%\label{sec:basic-attributes}
%
% \begin{macro}{\ST}
% Sets the strength of the current character
%    \begin{macrocode}
\NewDocumentCommand{\ST}{mO{nil}}{
  \GCInsertAttr{
    name=ST,
    type=basic_attribute,
    level=#1,
    points=#2
  }%
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\DX}
% Sets the dexterity of the current character
%    \begin{macrocode}
\NewDocumentCommand{\DX}{mO{nil}}{%
  \GCInsertAttr{
    name=DX,
    type=basic_attribute,
    level=#1,
    points=#2
  }%
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\IQ}
% Sets the IQ of the current character
%    \begin{macrocode}
\NewDocumentCommand{\IQ}{mO{nil}}{%
  \GCInsertAttr{
    name=IQ,
    type=basic_attribute,
    level=#1,
    points=#2
  }%
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\HT}
% Sets the health of the current character
%    \begin{macrocode}
\NewDocumentCommand{\HT}{mO{nil}}{%
  \GCInsertAttr{
    name=HT,
    type=basic_attribute,
    level=#1,
    points=#2
  }%
}
%    \end{macrocode}
% \end{macro}
%
%
%\subsubsection{Secondary Characteristics}
%\label{sec:secondary-characteristics}
%
% This section defines secondary characteristics (as \gurpsbook{Basic Set}).
% Points are set in a later function \cs{gurps@char@checkandfixattrsandpoints}
% if they are not set here.
% 
% \begin{macro}{\HP}
% Sets the HP of the current character
%    \begin{macrocode}
\NewDocumentCommand{\HP}{mO{nil}}{%
  \GCInsertAttr{
    name=HP,
    type=secondary_characteristic,
    level=#1,
    points=#2
  }%
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\Per}
% Sets the perception of the current character
%    \begin{macrocode}
\NewDocumentCommand{\Per}{mO{nil}}{%
  \GCInsertAttr{
    name=Per,
    type=secondary_characteristic,
    level=#1,
    points=#2
  }%
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\Will}
% Sets the will of the current character
%    \begin{macrocode}
\NewDocumentCommand{\Will}{mO{nil}}{%
  \GCInsertAttr{
    name=Will,
    type=secondary_characteristic,
    level=#1,
    points=#2
  }%
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\FP}
% Sets the FP of the current character
%    \begin{macrocode}
\NewDocumentCommand{\FP}{mO{nil}}{%
  \GCInsertAttr{
    name=FP,
    type=secondary_characteristic,
    level=#1,
    points=#2
  }%
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\SM}
% Sets the SM of the current character
%    \begin{macrocode}
\NewDocumentCommand{\SM}{m}{%
  \GCInsertAttr{
    name=SM,
    type=property,
    level=#1
  }%
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\DR}
% Sets the DR of the current character. Takes \cs{DR}\oarg{specialisation}\marg{level}.
%    \begin{macrocode}
\NewDocumentCommand{\DR}{om}{
  \IfValueTF{#1}{%
    \GCInsertAttr{%
      name={DR (#1)},%
      type=property,%
      level=#2%
    }%%
  }{%
    \GCInsertAttr{%
      name=DR,%
      type=property,%
      level=#2%
    }%
  }%
}
%    \end{macrocode}
% \end{macro}
% 
% \begin{macro}{\thr}
% Sets the thr of the current character
%    \begin{macrocode}
\NewDocumentCommand{\thr}{m}{
  \GCInsertAttr{
    name=thr,
    type=property,
    diceexpr=#1
  }%
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\sw}
% Sets the sw of the current character
%    \begin{macrocode}
\NewDocumentCommand{\sw}{m}{
  \GCInsertAttr{
    name=sw,
    type=property,
    diceexpr=#1
  }%
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\characterpicture}
% Sets the picture of the current character. NOTE: this will silently not add a
% picture if the file does not exist! This macro is primarly designed to be used
% with the gcs latex template.
%    \begin{macrocode}
\NewDocumentCommand{\characterpicture}{m}{
    \GCInsertAttr{
      name={Character picture},
      type=property,
      value={#1}
    }%
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\basicspeed}
% Sets the Basic Speed of the current character
%    \begin{macrocode}
\NewDocumentCommand{\basicspeed}{mO{nil}}{
  \GCInsertAttr{
    name={Basic Speed},
    type=secondary_characteristic,
    level=#1,
    points=#2
  }%
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\basicmove}
% Sets the Basic Move of the current character
%    \begin{macrocode}
\NewDocumentCommand{\basicmove}{mO{nil}}{
  \GCInsertAttr{
    name={Basic Move},
    type=secondary_characteristic,
    level=#1,
    points=#2
  }%
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\gurps@char@insertattack}
%    \begin{macrocode}
\define@key{gurps@char@insertattack}{name}{
  \def\gurps@char@insertattack@name{\luastring{\unexpanded{#1}}}}
\define@key{gurps@char@insertattack}{type}{
  \def\gurps@char@insertattack@type{\luastring{\unexpanded{#1}}}}
\define@key{gurps@char@insertattack}{damage}{
  \def\gurps@char@insertattack@damage{\luastring{\unexpanded{#1}}}}
\define@key{gurps@char@insertattack}{level}{\def\gurps@char@insertattack@level{#1}}
\define@key{gurps@char@insertattack}{acc}{\def\gurps@char@insertattack@acc{#1}}
\define@key{gurps@char@insertattack}{reach}{
  \def\gurps@char@insertattack@reach{\luastring{\unexpanded{#1}}}}
\define@key{gurps@char@insertattack}{range}{
  \def\gurps@char@insertattack@range{\luastring{\unexpanded{#1}}}}
\define@key{gurps@char@insertattack}{notes}{
  \def\gurps@char@insertattack@notes{\luastring{\unexpanded{#1}}}}

  % Set default values
\setkeys{gurps@char@insertattack}{
  name=NotSet,
  type=NotSet,
  damage=0d,
  level=nil,
  acc=nil,
  reach=NotSet,
  range=NotSet,
  notes=,
}
\NewDocumentCommand{\gurps@char@insertattack}{sm}{
  % If not in character or character* environment, raise a PackageError
  \def\@myenvname{character}
  \ifx\@currenvir\@myenvname
    % pass
  \else
    \def\@myenvname{character*}
    \ifx\@currenvir\@myenvname
      % pass
    \else
      \PackageError{gurps}{Not in character environment! Currently in \@currenvir{} environment.}{}
    \fi
  \fi

  \IfBooleanTF{#1}{}{
    \setkeys{gurps@char@insertattack}{
      name=NotSet,
      type=NotSet,
      damage=0d,
      level=nil,
      acc=nil,
      reach=NotSet,
      range=NotSet,
      notes={},
    }

    \setkeys{gurps@char@insertattack}{#2}
  }
  % \show\gurps@char@insertattack@name
  % \show\gurps@char@insertattack@type
  % \show\gurps@char@insertattack@level
  % \show\gurps@char@insertattack@damage
  % \show\gurps@char@insertattack@reach
  % \show\gurps@char@insertattack@range
  % \show\gurps@char@insertattack@notes
  \luadirect{x = {
      name=\gurps@char@insertattack@name,
      type=\gurps@char@insertattack@type,
      level=\gurps@char@insertattack@level,
      damage=\gurps@char@insertattack@damage,
      reach=\gurps@char@insertattack@reach,
      range=\gurps@char@insertattack@range,
      notes=\gurps@char@insertattack@notes,
    }
    if_else_packageerror(
      function() return is_valid_type(x.type) end,
      "Type '" .. x.type .. "' is not a valid attribute type!"
        .. " Did you remember to set the type?"
    )
    insert_attr(_GCHARACTERKEY, x)
  }
}

%    \end{macrocode}
% \end{macro}

% \begin{macro}{\rangedattack}
%    \begin{macrocode}
\NewDocumentCommand{\rangedattack}{m}{%
  \setkeys{gurps@char@insertattack}{#1}%
  \setkeys{gurps@char@insertattack}{type=ranged_attack}

  \gurps@char@insertattack*{}
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\GCPrintAttack}
%    \begin{macrocode}
\NewDocumentCommand{\GCPrintAttack}{mmmO{RangeOrReach}mm}{%
  \textbf{\textit{#1 \fbox{#2} #3}} #6 \textit{#4: #5}%
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\meleeattack}
%    \begin{macrocode}
\NewDocumentCommand{\meleeattack}{m}{%
  \setkeys{gurps@char@insertattack}{#1}%
  \setkeys{gurps@char@insertattack}{type=melee_attack}

  \gurps@char@insertattack*{}
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\advantage}
% Adds an advantage to a character. NOTE: this only works in a |character|.
%    \begin{macrocode}
\NewDocumentCommand{\advantage}{mO{nil}}{%
  \GCInsertAttr{%
    name={#1},%
    type=advantage,%
    points=#2%
  }%
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\perk}
% Adds an perk to a character. NOTE: this only works in a |character|.
%    \begin{macrocode}
\NewDocumentCommand{\perk}{m}{%
  \GCInsertAttr{%
    name={#1},%
    type=perk,%
    points=1%
  }%
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\disadvantage}
% Adds a disadvantage to a character. NOTE: this only works in a |character| or
% |lens| environment.
%    \begin{macrocode}
\NewDocumentCommand{\disadvantage}{mO{nil}}{%
  \GCInsertAttr{%
    name={#1},%
    type=disadvantage,%
    points=#2%
  }%
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\quirk}
% Adds a quirk to a character. NOTE: this only works in a |character| or
% |lens| environment.
%    \begin{macrocode}
\NewDocumentCommand{\quirk}{m}{%
  \GCInsertAttr{%
    name={#1},%
    type=quirk,%
    points=-1
  }%
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\levelledadvantage}
% Adds an advantage to a character. NOTE: this only works in a |character| or
% |lens| environment.
%    \begin{macrocode}
% TODO finish this!
\NewDocumentCommand{\levelledadvantage}{mmO{nil}}{%
  \GCInsertAttr{%
    name={#1},%
    type=advantage,%
    level=#2,
    points=#3%
  }%
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\levelleddisadvantage}
% Adds a disadvantage to a character. NOTE: this only works in a |character| or
% |lens| environment.
%    \begin{macrocode}
\NewDocumentCommand{\levelleddisadvantage}{mmO{nil}}{%
  \GCInsertAttr{%
    name={#1},%
    type=disadvantage,%
    level=#2,
    points=#3%
  }%
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\gurps@char@SpellOrSkill}
% Macro for skills or spells (since functionally they are the same in \gurps.).
% The \oarg{points} can be a specifier e.g. |DX/Easy| or points e.g. |48|.
%    \begin{macrocode}
\NewDocumentCommand{\gurps@char@SpellOrSkill}{mm}{
  \NewDocumentCommand{#1}{mom}{%
    \IfValueTF{##2}{%
      % \makeatletter%
      \luadirect{
        tmpone = \luastring{\unexpanded{##1}}
        tmptwo = \luastring{\unexpanded{##2}}
        tmpthree = \luastring{\unexpanded{##3}}
      }%
      \IfInteger{##2}{%
        \luadirect{
          tex.sprint(
          [[\GCInsertAttr{]]
            .. [[name={]] .. tmpone .. [[},]]
            .. [[type=#2,]]
            .. [[points=##2,]]
            .. [[level=]] .. tmpthree
            .. "}"
          )
       } 
      }{%
        \luadirect{
          basedon = tmptwo:gsub('/.*', '')
          difficulty = tmptwo:gsub('.*/', '')
          tex.sprint(
          [[\GCInsertAttr{]]
            .. [[name={]] .. tmpone .. [[},]]
            .. [[type=#2,]]
            .. [[basedon=]] .. basedon .. ','
            .. [[difficulty=]] .. difficulty .. ','
            .. [[level=]] .. tmpthree
            .. "}"
          )
        }%
      }%
      % \makeatother%
    }{%
      \GCInsertAttr{%
        name={##1},%
        type=#2,%
        level=##3
      }%
    }%
  }
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\skill}
%    \begin{macrocode}
\gurps@char@SpellOrSkill{\skill}{skill}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\spell}
%    \begin{macrocode}
\gurps@char@SpellOrSkill{\spell}{spell}
%    \end{macrocode}
% \end{macro}

%
%\subsubsection{Stat block formatting}
%\label{sec:stat-block-formatting}
%
% \begin{macro}{\charactertitle}
%   As a title for the character stats block, we define |\charactertitle|
%    \begin{macrocode}
\newcounter{charactertitle} % to keep LaTeX happy
\newcommand{\charactertitlemark}[1]{} % ditto
\newcommand\charactertitle{%
  \@startsection{charactertitle}%
  {100}%        level for secnumdepth and tocdepth
  {\z@}%       indentation
  {\topsep}%   space before
  {\topsep}%   space below
  {\raggedright\Large\bfseries}% format of the text
}
%    \end{macrocode}
% \end{macro}
% 
% \begin{macro}{\charactersection}
%   For sections in the the character stats block, we define |\charactersection|
%    \begin{macrocode}
\newcounter{charactersection} % to keep LaTeX happy
\newcommand{\charactersectionmark}[1]{} % ditto
\newcommand\charactersection{%
  \@startsection{charactersection}%
    {101}%        level for secnumdepth and tocdepth
    {\z@}%       indentation
    {\topsep}%   space before
    {-1em}%   space below
    {\raggedright\bfseries}% format of the text
}
% \NewDocumentCommand{\charactersection}{m}{%
%   \noindent\par\noindent\textbf{\large #1}\\\noindent%
% }
%    \end{macrocode}
% who's code is taken almost without change from |https://tex.stackexchange.com/questions/97565/flexible-vspace#97570|.
% \end{macro}
%
% \begin{environment}{charactertraitlist}
%  We define the |charactertraitlist| to list the traits. By default, this is an
%  |itemize*| from the |enumitem| package with some customisations
%    \begin{macrocode}
\NewDocumentEnvironment{charactertraitlist}{}
{\noindent\begin{itemize*}[itemjoin={{; }},label=,afterlabel={}]}
  {\end{itemize*}}
%    \end{macrocode}
% \end{environment}
% 
% \begin{environment}{GCAttackList}
%  We define the |attacktraitlist| to list the traits. By default, this is an
%  |itemize*| from the |enumitem| package with some customisations
%    \begin{macrocode}
\NewDocumentEnvironment{GCAttackList}{}
{%
  \noindent%
  \begin{itemize}[%
    % itemjoin={\\},% TODO figure out why this causes a problem!
    label={--},%
    wide,
    nosep
    % afterlabel={},% Default of ~ is good
    ]%
  }{\end{itemize}}
%    \end{macrocode}
% \end{environment}

%
% \begin{macro}{\GCPrintAttr}
% It's like this:
% \cs{GCPrintAttr}\oarg{level/diceexpr}\marg{name}\oarg{points}. This
% macro is usually called by the lua function |attr_to_tex| (which returns a
% string)
%
% The following toggle is to check if points should be printed. It's used in the
% |attr_to_tex| lua function.
%    \begin{macrocode}
\newtoggle{GCPrintPointsToggle}
\toggletrue{GCPrintPointsToggle}
%    \end{macrocode}
%    \begin{macrocode}
\NewDocumentCommand{\GCPrintAttr}{omo}{%
  \IfValueTF{#3}{%
    \def\tmp@points{[#3]}%
  }{%
    \def\tmp@points{}%
  }%
  \IfValueTF{#1}{%
    #2~#1~\tmp@points%
  }{%
    #2~\tmp@points%
  }%
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\GCPrintListOfAttacks}
%    \begin{macrocode}
\NewDocumentCommand{\GCPrintListOfAttacks}{}{%
  \luadirect{attacklist(_GCHARACTERKEY)}
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\GCPrintListOf}
% Print list of attributes. Allowed keys are:
% \begin{itemize}
% \item advantages
% \item disadvantages
% \item perks
% \item quirks
% \item skills
% \item spells
% \item traits
% \end{itemize}
% Which can be mixed and matched like so \cs{GCPrintListOf}\oarg{sorting method}\marg{things} where
% things can be |perks,quirks| or |skills,advantages| etc..
%    \begin{macrocode}
\NewDocumentCommand{\GCPrintListOf}{O{nil}m}{%
  \luadirect{traitlistmaker(create_list_predicate(\luastring{#2}), nil, #1)}%
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\gurps@char@TraitListMaker}
%    \begin{macrocode}
\NewDocumentCommand{\gurps@char@TraitListMaker}{mmO{nil}}{
  \NewDocumentCommand{#1}{}{%
    \makeatletter%
    \luadirect{traitlistmaker(#2, _GCHARACTERKEY, #3)}%
    \makeatother%
  }%
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\gurps@char@totalpoints}
%    \begin{macrocode}
\NewDocumentCommand{\gurps@char@totalpoints}{O{_}}{%
  \luadirect{tex.sprint(sum_points(\luastring{\unexpanded{#1}}))}~pt%
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\gurps@char@checkandfixattrsandpoints}
%    \begin{macrocode}
\NewDocumentCommand{\gurps@char@checkandfixattrsandpoints}{}{%
  \luadirect{check_and_fix_attrs_and_points(_GCHARACTERKEY)}%
}
%    \end{macrocode}
% \end{macro}
%    \begin{macrocode}
\endinput
%</package>
%    \end{macrocode}
%\Finale
